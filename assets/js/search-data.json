{
  
    
        "post0": {
            "title": "Title",
            "content": "&quot;데이터 분석 numpy 기초 문법 노트북&quot; . &quot;2021년 여름방학 데이터분석을 위한 Numpy 기초문법&quot; . toc:true- branch: master | badges: true | comments: true | author: namyeon | categories: [python, 데이터분석,numpy] | . 항목 추가 | 항목 추가 | 리스트 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 리스트[0][0] 리스트[0] 리스트[2][0] 리스트 * 2 . [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]] . import numpy as np 리스트 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 리스트 = np.array(리스트) 리스트 * 2 리스트 + 100 . array([[101, 102, 103], [104, 105, 106], [107, 108, 109]]) . a = np.arange(20).reshape(4, 5) a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . a = np.arange(20).reshape(2, 2, 5) a[0][1][2] . 7 . a = np.arange(15).reshape(3, 5) a a.shape a.ndim #n dimension의 약자 a.dtype.name a.itemsize a.size # flat한 데이터 사이즈 type(a) . numpy.ndarray . np.zeros((3, 4)) . array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]) . np.ones((2, 3), dtype=np.int16) . array([[1, 1, 1], [1, 1, 1]], dtype=int16) . np.empty((2, 3)) . array([[4.65490234e-310, 0.00000000e+000, 0.00000000e+000], [0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]) . np.arange(0, 2, 0.3) . array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]) . np.linspace(0, 9.5, 20) . array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. , 6.5, 7. , 7.5, 8. , 8.5, 9. , 9.5]) . 리스트 = [[10, 2, 3], [4, 5, 6], [7, 8, 9]] a = np.arra(리스트) # a.sum(), sum(리스트) # sum(리스트)는 애러납니다. a.min(), min(리스트) a.max . b = np.arange(12).reshape(3, 4) b . array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) . b.sum(axis=0) # col기준으로 row끼리 더한 것(세로) b.sum(axis=1) # row기준으로 col끼리 더한 것(가로) b.sum() # flat하게 모두 더한 것 . 66 . b.ravel() #평평하게 펴주는 것 . array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . b.T #잘 써요 # b.transpose() 잘 안써요 . array([[ 0, 4, 8], [ 1, 5, 9], [ 2, 6, 10], [ 3, 7, 11]]) . a = np.array([[1, 2],[3, 4]]) b = np.floor([[5,6], [7,8]]) np.vstack((a, b)) np.hstack((a, b)) . array([[1., 2., 5., 6.], [3., 4., 7., 8.]]) . a = np.arange(12).reshape(3, 4) b = a &gt; 4 b . array([[False, False, False, False], [False, True, True, True], [ True, True, True, True]]) . b.sum() . 7 .",
            "url": "https://yeonniya.github.io/colab-blog/2021/07/04/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_numpy.html",
            "relUrl": "/2021/07/04/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_numpy.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "데이터 분석 Python 기초 문법 노트북",
            "content": "X = 3 Y = 7 X + Y . 10 . 마크다운 . &#47560;&#53356;&#45796;&#50868; . &#47560;&#53356;&#45796;&#50868; . &#47560;&#53356;&#45796;&#50868; . hello world | hello world | hello world | . hello world 1.hello world | hello world | &#48320;&#49688; . 대문자와 소문자는 다릅니다 | 변수명에 띄어쓰기를 하지 않습니다 | 맨 앞에 숫자를 사용하지 않습니다. | 카멜 표기법이나 스네이크 표기법 중 일반 변수는 스네이크 표기법을 사용합니다. | for, if, print, sum등 이미 예약되어 있는 것은 변수로 사용하지 않습니다. | . x = 3 y = 7 x + y x - y x * y x // y . 0 . x = 3 y = 7 print(x + y) print(x - y) print(x * y) print(x // y) . 10 . a = 10 b = &#39;10&#39; print(a + a) print(b + b) . 20 1010 . a = 10 # int : 정수 b = &#39;10&#39; # str : 문자 c =&#39;lee &#39; d = &#39;hojun&#39; e = True # bool : 불리언 f = 10.1 # float : 실수 print(type(a)) . &lt;class &#39;int&#39;&gt; . 3 &gt; 10 . False . a + b . TypeError Traceback (most recent call last) &lt;ipython-input-10-bd58363a63fc&gt; in &lt;module&gt;() -&gt; 1 a + b TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . a = [10, 20, 30, 10.1, 20.1, 30.1, &#39;hojun&#39;] #list b = (10, 20, 30) # tuple c = {10, 20, 30, 30, 30} # set d = {&#39;one&#39;:1, &#39;two&#39;:2} # dict print(type(a)) . &lt;class &#39;list&#39;&gt; . a.pop() sum(a) . 90.19999999999999 . a = 10 b = &#39;10&#39; print(str(a) + b) print(a + ) . &#54805;&#48320;&#54872; . &#49328;&#49696;&#50672;&#49328; . a = 7 b = 3 print(a + b) print(a - b) print(a * b) print(a / b) print(a // b) print(a ** b) . 10 4 21 2.3333333333333335 2 343 . &#48708;&#44368;&#50672;&#49328; . a = 3 b = 5 print(a &gt; b) print(a &gt;= b) print(a &lt; b) print(a &lt;= b) print(a == b) print(a % b) . False False True True False True . &#45436;&#47532;&#50672;&#49328; . a = 10 b = 20 a + b . 30 . a = True #1 b = False #0 print(a and b) print(a or b) print(not a) . False True False . result = 0 for i in range(1001): if i % 3 == 0 or i % 5 == 0: result = result + i print(result) . 234168 . &#47928;&#51088;&#50676; . s = &#39;paullab CEO leehojun&#39; . s.count(&#39;l&#39;) . 3 . s.count(&#39; &#39;) . 2 . s.upper() . &#39;PAULLAB CEO LEEHOJUN&#39; . s.lower() . &#39;paullab ceo leehojun&#39; . s.split(&#39; &#39;) . [&#39;paullab&#39;, &#39;CEO&#39;, &#39;leehojun&#39;] . &#39;-&#39;.join([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]) . &#39;a-b-c&#39; . d = s.split(&#39; &#39;) &#39;-&#39;.join(d) . &#39;paullab-CEO-leehojun&#39; . s= &#39; hello world&#39; print(s) print(s.strip()) print(s.replace(&#39; &#39;,&#39;&#39;)) . hello world hello world helloworld . &#47532;&#49828;&#53944; . 순서가 있고, 수정이 가능합니다. | . a = [10, 20, 30, 40, 50, 60, 70, 15] a a[0] # 0은 인덱스이고, a[0] 호출하는 것을 indexing이라고 합니다. a[0], a[1], a[2], a[3], a[4] a[0:5] #슬라이싱, 자료형[start:stop:step] a[::2] #슬라이싱, 자료형[start:stop:step], 자주 안쓴다 a[::-1] #슬라이싱, 자료형[start:stop:step] a[0] = 1000 a . [15, 70, 60, 50, 40, 30, 20, 10] . dir(a) a.append(10) # 값을 맨 뒤에 추가합니다. a.clear() # a에 모든 값을 비웁니다. 안써요 a.copy() # a에 모든 값을 복사합니다 a.count() # a 에서 특정한 값의 개수를 찾습니다. a.extend([10, 20, 30]) # a에 맨 뒤에 여러개의 값을 추가합니다. a.index() # a에서 특정한 값의 인덱스를 찾습니다. a.insert(2. 10000) # a의 중간에 값을 삽입합니다. a.pop() # a에 맨 뒤에 값을 빼냅니다. 빼낸 값은 삭제됩니다. 잘써요 a.remove(10000) # a에 특정한 값을 삭제합니다. a.reverse() # a에 값을 뒤집습니다. 잘써요 a.sort() # a의 값을 정렬합니다. 잘써요 . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] . a.append(100) a.append(100) a . [10, 15, 20, 30, 40, 50, 60, 70, 100, 100, 100, 100, 100, 100] . a.count(100) . 6 . a.sort() a . [10, 15, 20, 30, 40, 50, 60, 70, 100, 100, 100, 100, 100, 100] . a.reverse() a . [100, 100, 100, 100, 100, 100, 70, 60, 50, 40, 30, 20, 15, 10] . &#53916;&#54540;, &#46357;&#49492;&#45320;&#47532;, &#49483; . t = (10,20,30) t . (10, 20, 30) . dir(t) . 영한번역 = {&#39;one&#39; : &#39;하나&#39;, &#39;two&#39; : &#39;둘&#39;} 영한번역[&#39;one&#39;] . &#39;하나&#39; . s = {10, 20, 30, 30, 30} s . {10, 20, 30} . s = {10, 20, 30, 30, 30} ss = {10, 40, 50} s | ss # 합집합 s &amp; ss # 교집합 s - ss # 차집합 . f-string . age = 10 name = &#39;leehojun&#39; print(&#39;제 이름은 leehojun 입니다. 제 나이는 10 살입니다.&#39;) print(&#39;제 이름은&#39;, name, &#39;입니다. 제 나이는 &#39;, age, &#39;살입니다.&#39;) print(&#39;제 이름은 {0} 입니다. 제 나이는 {1} 살입니다.&#39;.format(name,age)) print(f&#39;제 이름은 {name} 입니다. 제 나이는 {age+age} 살입니다.&#39;) #이것만 씁시다! . 제 이름은 leehojun 입니다. 제 나이는 10 살입니다. 제 이름은 leehojun 입니다. 제 나이는 10 살입니다. 제 이름은 leehojun 입니다. 제 나이는 10 살입니다. 제 이름은 leehojun 입니다. 제 나이는 20 살입니다. . Builtin function . abs() : 절대값 | min() : 최솟값 | max() : 최댓값 | dir() : 매서드 확인 | id() : 메모리 주소 확인 | sorted() : 정렬 | reversed() : 역순(역정렬 아님) | enumerate() : 순서를 매김 (for 하면서 설명) | 형변환 : set() : 집합으로 형변환 | dict() : 딕셔너리로 형변환 | bool() : 불리언으로 형변화 | int() : 정수형으로 형변환 | str() : 문자열로 형변환 | float() : 실수형으로 형변환 | tuple() : 튜플형으로 형변환 | . | ord() : 문자를 숫자로 변환 | chr() : 숫자를 문자로 변환 | sum() : 전부 더함 | filter() : 필터링(수학점수 90점 이상인 사람?) | plint() : 출력 | format() : 콤마찍기 | len() : 길이출력, 중요 !! | type() : 타입 알아보기 중요 | range() : 연속된 값 생성(0~99-&gt;range(100)) | zip(&#39;abc&#39;,&#39;def&#39;) | map(lambda x:x**2,[1,2,3]) | round():소수점 자리 반올림 | . list(zip(&#39;abc&#39;, &#39;def&#39;, &#39;aaa&#39;)) . [(&#39;a&#39;, &#39;d&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;e&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;f&#39;, &#39;a&#39;)] . &#51312;&#44148;&#47928; . if True: print(&#39;hello&#39;) print(&#39;end&#39;) . hello end . score = 89 money = 0 if score &gt; 90: print(&#39;mom : i m so happy&#39;) money += 100000 # money = money + 1000000, 할당연산이라 부릅니다. elif score &gt; 80: print(&#39;mom : i m happy&#39;) money += 100000 elif score &gt; 70: print(&#39;mom : happy?&#39;) money += 10000 else: print(&#39;mom : ...&#39;) print(money) . mom : im happy 100000 . &#47928;&#51228; &#54400;&#51060;&#50752; &#50629;&#45796;&#50868; &#44172;&#51076; &#49884;&#51089; . str(list(range(100))) str(list(range(100))).count(&#39;8&#39;) str(list(range(10001))).count(&#39;8&#39;) . 4000 . 리스트 = [1, 3, 4, 8, 13, 17, 20] 리스트둘 = 리스트[1:] . list(zip(리스트, 리스트둘)) . [(1, 3), (3, 4), (4, 8), (8, 13), (13, 17), (17, 20)] . 묶어준리스트 = list(zip(리스트, 리스트둘)) 묶어준리스트.sort(key=lambda x:x[0]-x[1], reverse=True) 묶어준리스트 묶어준리스트[0] . (3, 4) . l = [&#39;a&#39;, &#39;bbb&#39;, &#39;cc&#39;, &#39;eeeee&#39;, &#39;dddd&#39;] . import random 정답 = random.randint(1,100) while True: user = int(input(&#39;숫자를 입력해주세요.&#39;)) if user &lt; 정답: print(&#39;up&#39;) elif user &gt; 정답: print(&#39;Down&#39;) else: print(&#39;정답!&#39;) break . 숫자를 입력해주세요.20 up 숫자를 입력해주세요.60 up 숫자를 입력해주세요.70 Down 숫자를 입력해주세요.65 up 숫자를 입력해주세요.68 정답! . &#48152;&#48373;&#47928; . list(range(10)) # stop list(range(0, 10, 2)) # start, stop, step list(range(5, 10)) # start, stop list(range(10, 5, -1)) # start, stop, step . [10, 9, 8, 7, 6] . s = 0 for i in range(0, 101, 2): s = s + i # s += 1 print(s) . 5050 . sum(range(0, 101, 2)) . 2550 . for i in range(1, 10): print(f&#39;{2} X {i} = {2 * i}&#39;) . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 . for 단 in range(2, 10): for i in range(1, 10): print(f&#39;{단} X {i} = {단 * i}&#39;) . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 3 X 1 = 3 3 X 2 = 6 3 X 3 = 9 3 X 4 = 12 3 X 5 = 15 3 X 6 = 18 3 X 7 = 21 3 X 8 = 24 3 X 9 = 27 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 4 X 5 = 20 4 X 6 = 24 4 X 7 = 28 4 X 8 = 32 4 X 9 = 36 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 5 X 6 = 30 5 X 7 = 35 5 X 8 = 40 5 X 9 = 45 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 6 X 7 = 42 6 X 8 = 48 6 X 9 = 54 7 X 1 = 7 7 X 2 = 14 7 X 3 = 21 7 X 4 = 28 7 X 5 = 35 7 X 6 = 42 7 X 7 = 49 7 X 8 = 56 7 X 9 = 63 8 X 1 = 8 8 X 2 = 16 8 X 3 = 24 8 X 4 = 32 8 X 5 = 40 8 X 6 = 48 8 X 7 = 56 8 X 8 = 64 8 X 9 = 72 9 X 1 = 9 9 X 2 = 18 9 X 3 = 27 9 X 4 = 36 9 X 5 = 45 9 X 6 = 54 9 X 7 = 63 9 X 8 = 72 9 X 9 = 81 . x = 1 while x &lt; 10 : print(f&#39;{2} X {i} = {2 * i}&#39;) x += 1 . 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 2 X 9 = 18 . 모듈 . # name = &#39;namyeon&#39; # age = 10 . import test as t print(t.name) print(t.age) . namyeon 10 . from test import name, age print(name) print(age) . namyeon 10 . &#54632;&#49688; . 재사용성을 높일 수 있다. | 코드의 구조를 파악하기 쉽다. | 유지보수를 쉽게 할 수 있다. | def 더하기(x,y): return x + y 더하기(10, 20) . 30 . def 원의넓이(r): return (r**2) * 3.14 print(원의넓이(10) + 100) print(원의넓이(10) + 50) . 414.0 364.0 . 점수 = [10, 20, 30, 40] def 평균(반점수): s = 0 for i in 반점수: s += i return s / len(반점수) print(평균(점수)) print(평균(점수) +5) . 25.0 30.0 . &#54028;&#51068; &#51077;&#52636;&#47141; . f = open(&quot;구구단.txt&quot;, &#39;w&#39;) # r(읽음). w(작성, 덮어씀), a(추가) data = &#39;&#39; for 단 in range(2, 10): for i in range(1, 10): data += f&#39;{단} X {i} = {단 * i} n&#39; f.write(data) f.close() . &#53364;&#47000;&#49828; . 현실세계의 개념을 Code로 옮겨놓는 것 | 클래스의 첫 문자열은 대문자로 합니다. | . class Car : # 클래스 변수 또는 맴버 maxspeed = 300 maxpeople = 5 #메서드 def start(self): print(&#39;출발하였습니다.&#39;) def stop(self): print(&#39;멈췄습니다.&#39;) . audi = Car() # audi라는 인스턴스 생성 bmw = Car() # bmw라는 인스턴스 생성 audi.start() print(audi.maxpeople) print(Car.maxspeed) # 이렇게 실행하시면 안됩니다. . 출발하였습니다. 5 300 . dir(audi) . [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;maxpeople&#39;, &#39;maxspeed&#39;, &#39;start&#39;, &#39;stop&#39;] . class 전기차(Car): 배터리 = 100 배터리에_따라_갈_수_있는_거리 = 300 전기차audi = 전기차() 전기차audi.start() . 출발하였습니다. .",
            "url": "https://yeonniya.github.io/colab-blog/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/2021/07/04/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_Python.html",
            "relUrl": "/python/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/2021/07/04/_07_05_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D_Python.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yeonniya.github.io/colab-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yeonniya.github.io/colab-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yeonniya.github.io/colab-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yeonniya.github.io/colab-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}